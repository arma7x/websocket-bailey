import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
//import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'

//const inter = Inter({ subsets: ['latin'] })

import QRCode from "react-qr-code";
import { useEffect, useState } from 'react';
import io from 'socket.io-client';
import AttachmentsWidget from '../components/AttachmentsWidget.tsx'

let socket;

export default function Home() {

  let openAttachmentsWidget;

  const [metadata, setMetadata] = useState({ connection: 'connecting' });
  const [qrCode, setQrCode] = useState('');
  const [chats, setChats] = useState([]);
  const [windows, setWindows] = useState('CHAT_LIST'); // CHAT_LIST || chat.id
  const [messages, setMessages] = useState([]);

  const resumeSession = () => {
    const session = window.localStorage.getItem('SESSION');
    socket.emit('init-session', session);
  }

  const socketInitializer = async () => {
    await fetch('/api/socket')

    socket = io();

    socket.on('connect', () => {
      resumeSession();
    });

    socket.on('init-session', session_id => {
      window.localStorage.setItem('SESSION', session_id);
    });

    // connection == 'open' || 'connecting' || 'close'
    socket.on('connection.update', data => {
      if (data != null) {
        setQrCode(data.qr || metadata.qr || '');
        setMetadata(data);
      }
    });

    socket.on('chats.set', data => {
      data.sort((a, b) => {
        return a.conversationTimestamp.low > b.conversationTimestamp.low;
      });
      setChats(data);
    });
  }

  useEffect(() => {
    socketInitializer();
  }, []);

  function resolveMessage(message) {
    if (message.conversation)
      return <div>{message.conversation}</div>;
    if (message.templateMessage)
      return <div>{message.templateMessage.hydratedTemplate.hydratedContentText}</div>
  }

  function openChat(chat) {
    setMessages(chat._messages);
    setWindows(chat.id);
  }

  function showChatList() {
    setWindows('CHAT_LIST');
  }

  function onCancel() {}

  function onSuccess(attachments) {
    // TODO: https://github.com/WhiskeySockets/Baileys/tree/master#media-messages
    console.log("READY:", attachments);
  }

  return (
    <>
      <Head>
        <title>Whatsapp Baileys</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        {
          ['connecting', 'close'].indexOf(metadata.connection) === -1
          ? <div>
              {
                windows === 'CHAT_LIST' && chats.map((chat) =>
                  <a key={chat.id} onClick={() => openChat(chat)} style={{ cursor: 'pointer' }}>
                    <div style={{ backgroundColor: '#fff', marginBottom: '10px', border: '1px solid #000', padding: '5px', borderRadius: '5px' }}>
                      <div>{chat.id}</div>
                      <div>{chat.unreadCount}</div>
                      { resolveMessage(chat.messages[0].message.message) }
                      <div>{new Date(chat.conversationTimestamp.low * 1000).toString()}</div>
                    </div>
                  </a>
                )
              }
              {
                windows !== 'CHAT_LIST' &&
                <div style={{ position: 'relative' }}>
                  <button onClick={showChatList}>Go Back</button>
                  <div style={{ position: 'relative', height: '70vh', maxWidth: '800px', overflowY: 'scroll' }}>
                    <p>{ JSON.stringify(messages, null, 2) }</p>
                  </div>

                  <AttachmentsWidget setHandler={(handler) =>  openAttachmentsWidget = handler } onCancel={onCancel} onSuccess={onSuccess} />

                  <div style={{ position: 'absolute', bottom: -20, display: 'flex', flexDirection: 'row', width: '100%' }}>
                    <div style={{ width: '14%' }}>
                      <button onClick={() => {
                        if (openAttachmentsWidget)
                          openAttachmentsWidget();
                      }}>ATTACHMENT</button>
                    </div>
                    <div style={{ width: '76%' }}>
                      <input style={{ width: '99%' }} type="text" placeholder="Please enter message here" />
                    </div>
                    <div style={{ width: '10%' }}>
                      <button style={{ width: '100%' }}>SEND</button>
                    </div>
                  </div>
                </div>
              }
            </div>
          : <QRCode value={qrCode} />
        }
      </main>
    </>
  )
}
